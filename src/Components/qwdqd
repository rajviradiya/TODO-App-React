
const [timers, setTimers] = useState([]);

useEffect(() => {
    startRunningTimersOnLoad();
    return () => {
        timers.forEach(timer => clearInterval(timer.timerInterval));
    };
}, []);


    //Timer IN lis
    function createTimer(timerId) {
        return {
            id: timerId,
            startTime: null,
            timerInterval: null,
            elapsedTime: 0,
        };
    }

    function getTimer(timerId) {
        return timers.find(timer => timerId === timer.id);
    }

    function startRunningTimersOnLoad() {
        let localData = JSON.parse(localStorage.getItem("localData")) || [];
        const newTimers = localData.filter(element => element.state === "2").map(element => {
            const timer = createTimer(element.id);
            console.log(timer,"timer dtata")
            timer.elapsedTime = element.elapsedTime || 0;
            timer.startTime = element.starttime ? moment(element.starttime, "H:mm:ss") : null;
            timer.timerInterval = setInterval(() => updateTimer(timer), 1000);
            return timer;
        });
        setTimers(newTimers);
    }

    function startTimer(timerId) {
        const localData = JSON.parse(localStorage.getItem("localData")) || [];
        const time = moment().format("H:mm:ss");
        const updatedData = localData.map(element => {
            if (element.id === timerId) {
                element.starttime = time;
            }
            return element;
        });
        localStorage.setItem("localData", JSON.stringify(updatedData));
        const timer = getTimer(timerId);
        if (!timer.startTime) {
            timer.startTime = moment();
            timer.timerInterval = setInterval(() => updateTimer(timer), 1000);
        }
    }

    function updateTimer(timer) {
        const localData = JSON.parse(localStorage.getItem("localData")) || [];
        const currentTime = moment();
        const duration = moment.duration(currentTime.diff(timer.startTime) + timer.elapsedTime, "milliseconds");
        const formattedTime = moment.utc(duration.asMilliseconds()).format("H:mm:ss");
        const updatedData = localData.map(element => {
            if (element.id === timer.id) {
                element.currentTime = formattedTime;
            }
            return element;
        });
        localStorage.setItem("localData", JSON.stringify(updatedData));
    }

    function stopTimer(timerId) {
        const localData = JSON.parse(localStorage.getItem("localData")) || [];
        const time = moment().format("h:mm:ss");
        const updatedData = localData.map(element => {
            if (element.id === timerId) {
                element.endtime = time;
            }
            return element;
        });
        localStorage.setItem("localData", JSON.stringify(updatedData));
        const timer = getTimer(timerId);
        if (timer.startTime) {
            clearInterval(timer.timerInterval);
            timer.elapsedTime += moment().diff(timer.startTime);
            timer.startTime = null;
        }
    }

    function resetTimer(timerId) {
        const timer = getTimer(timerId);
        clearInterval(timer.timerInterval);
        timer.startTime = null;
        timer.elapsedTime = 0;
        const localData = JSON.parse(localStorage.getItem("localData")) || [];
        const updatedData = localData.map(element => {
            if (element.id === timerId) {
                element.starttime = "0:00:00";
                element.endtime = "0:00:00";
                element.currentTime = "0:00:00";
            }
            return element;
        });
        localStorage.setItem("localData", JSON.stringify(updatedData));
    }